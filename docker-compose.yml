# MCP Docker Compose Configuration
# Updated: June 2025

version: "3.8"  # Explicit version specification

networks:
  mcp-network:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.40.1.0/24
services:

  mcp-postgres:
    container_name: mcp-postgres
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mcp}
      - POSTGRES_USER=${POSTGRES_USER:-mcp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcp_password}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    volumes:
      - mcp-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
  mcp-redis:
    container_name: mcp-redis
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-mcp}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-mcp}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - mcp-cache:/data
  mcp-server:
    container_name: dhv01mcp
    image: mcp/docker:latest
    depends_on:
      mcp-redis:
        condition: service_healthy
      mcp-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - MCP_CONFIG_PATH=/app/config.yaml
      - MCP_SECRETS_PATH=/app/secrets
      - MCP_REGISTRY_PATH=/app/registry.yaml
      - MCP_NETWORK=mcp-network
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MCP_DATA_DIR=/app/data
      - MCP_CACHE_DIR=/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8811/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - com.docker.compose.project=mcp
      - com.docker.compose.service=mcp-server
      - traefik.enable=true
      - traefik.http.routers.mcp.rule=Host(`mcp.localhost`)
      - traefik.http.routers.mcp.middlewares=secured@file
    networks:
      - mcp-network
    ports:
      - "8811:8811"
      - "8812:8812"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./registry.yaml:/app/registry.yaml:ro
      - c:/Users/ofayese/.docker/mcp/secrets:/app/secrets:ro
      - mcp-data:/app/data
      - mcp-logs:/app/logs
      - mcp-cache:/app/cache
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - C:\:/host/c:ro
  traefik:
    container_name: mcp-traefik
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic_conf.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=auth@file
    networks:
      - mcp-network
    ports:
      - "80:80"
      - "8080:8080"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik_dynamic.yml:/etc/traefik/dynamic_conf.yml:ro
  socat-client:
    image: alpine/socat
    container_name: socat-client
    command: STDIO TCP:dhv01mcp:8811
    stdin_open: true
    tty: true
    depends_on:
      - dhv01mcp
    networks:
      - mcp-network
volumes:
  mcp-cache:
    driver: local
  mcp-data:
    driver: local
    driver_opts:
      device: ${PWD}/data
      o: bind
      type: none
  mcp-logs:
    driver: local
  
# External named volumes must be created before docker-compose up
# These are excluded from normal cleanup operations
# Use 'docker volume rm docker-socket' to manually remove if needed
  docker-socket:
    external: true
      - mcp-network
