# MCP Docker Compose Configuration
# Updated: June 2025
# Docker Compose v2 modern format with Host Networking

# Explicit version not required with Docker Compose v2, but included for compatibility
#version: "3.9"

# Note: Host networking is used for all services, no custom networks needed
# Legacy network configuration commented out for reference
# networks:
#   mcp-network:
#     driver: bridge
#     ipam:
#       driver: default
#       config:
#       - subnet: 192.168.65.0/24

services:

  dhv01mcp-postgres:
    container_name: dhv01mcp-postgres
    image: postgres:16-alpine
    network_mode: host
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mcp}
      - POSTGRES_USER=${POSTGRES_USER:-mcp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcp_password}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGPORT=${POSTGRES_PORT:-5432}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp} -h localhost -p ${POSTGRES_PORT:-5432}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - mcp-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
  dhv01mcp-redis:
    container_name: dhv01mcp-redis
    image: redis:7.2-alpine
    network_mode: host
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-mcp} --port ${REDIS_PORT:-6379}
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "${REDIS_PORT:-6379}", "-a", "${REDIS_PASSWORD:-mcp}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - mcp-cache:/data
  dhv01mcp:
    container_name: dhv01mcp
    image: mcp/docker:latest
    network_mode: host
    depends_on:
      dhv01mcp-redis:
        condition: service_healthy
      dhv01mcp-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - MCP_CONFIG_PATH=/app/config.yaml
      - MCP_SECRETS_PATH=/app/secrets
      - MCP_REGISTRY_PATH=/app/registry.yaml
      - MCP_HOST=${MCP_HOST:-localhost}
      - MCP_PORT=${MCP_PORT:-8811}
      - MCP_SECONDARY_PORT=${MCP_SECONDARY_PORT:-8812}
      - POSTGRES_HOST=localhost
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - REDIS_HOST=localhost
      - REDIS_PORT=${REDIS_PORT:-6379}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MCP_DATA_DIR=/app/data
      - MCP_CACHE_DIR=/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MCP_PORT:-8811}/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - com.docker.compose.project=mcp
      - com.docker.compose.service=dhv01mcp
      - traefik.enable=true
      - traefik.http.routers.dhv01mcp.rule=Host(`dhv01mcp.localhost`)
      - traefik.http.routers.dhv01mcp.middlewares=secured@file
      - traefik.http.services.dhv01mcp.loadbalancer.server.port=${MCP_PORT:-8811}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./registry.yaml:/app/registry.yaml:ro
      - c:/Users/ofayese/.docker/mcp/secrets:/app/secrets:ro
      - mcp-data:/app/data
      - mcp-logs:/app/logs
      - mcp-cache:/app/cache
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - C:\:/host/c:ro
  dhv01mcp-traefik:
    container_name: dhv01mcp-traefik
    image: traefik:v3.0
    network_mode: host
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic_conf.yml"
      - "--entrypoints.web.address=:${TRAEFIK_PORT:-80}"
      - "--entrypoints.websecure.address=:443"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--entrypoints.dashboard.address=:${TRAEFIK_DASHBOARD_PORT:-8080}"
      - "--log.level=INFO"
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=auth@file
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik_dynamic.yml:/etc/traefik/dynamic_conf.yml:ro
  dhv01mcp-socat-client:
    image: alpine/socat
    container_name: dhv01mcp-socat-client
    network_mode: host
    command: STDIO TCP:localhost:${MCP_PORT:-8811}
    stdin_open: true
    tty: true
    depends_on:
      - dhv01mcp
  dhv01mcp-ssh-gateway:
    container_name: dhv01mcp-ssh-gateway
    image: linuxserver/openssh-server:latest
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - SSH_ENABLE_PASSWORD_AUTH=false
      - SSH_ENABLE_ROOT=false
      - USER_NAME=${SSH_USER:-mcp}
      - PUBLIC_KEY_DIR=/config/ssh_keys
      - LISTEN_PORT=${SSH_GATEWAY_PORT:-2222}
    volumes:
      - type: bind
        source: ${SSH_KEY_PATH:-C:\Users\ofayese\.ssh}
        target: /config/ssh_keys
        read_only: true
        bind:
          create_host_path: true
      - type: volume
        source: dhv01mcp-ssh-config
        target: /config
        volume: {}
      - type: bind
        source: c:/Users/ofayese/.docker/mcp
        target: /mcp
        read_only: false
        bind:
          create_host_path: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    profiles:
      - ssh
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${SSH_GATEWAY_PORT:-2222}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
volumes:
  mcp-cache:
    driver: local
  mcp-data:
    driver: local
    driver_opts:
      device: ${PWD}/data
      o: bind
      type: none
  mcp-logs:
    driver: local
  dhv01mcp-ssh-config:
    driver: local
  
# External named volumes must be created before docker-compose up
# These are excluded from normal cleanup operations
# Use 'docker volume rm docker-socket' to manually remove if needed
  docker-socket:
    external: true
